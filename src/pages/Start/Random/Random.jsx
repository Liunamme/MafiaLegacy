// –ò–º–ø–æ—Ä—Ç—ã
import React, { useEffect, useState, useContext } from 'react';
import { StoreContext } from '../../../context/context';
import style from './Random.module.css';
/////////////////////////////////////////////////////

const Random = ({ data, handleClick, randomSwitch, type, text }) => { // data - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞; handleClick - callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞—Ä–∞–Ω–¥–æ–º–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö; randomSwitch - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ä–∞–Ω–¥–æ–º–æ–≤, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –µ—Å–ª–∏ 1–π —Ä–∞–Ω–¥–æ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ 2–π - –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –Ω–µ –º–æ–≥–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ; type - key —Ç–æ–≥–æ —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ data; text - —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º —á—Ç–æ —Ä–∞–Ω–¥–æ–º–∏—Ç—Å—è;
	// –°–æ—Å—Ç–æ—è–Ω–∏—è
	const [firstRef, setFirstRef] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö
	const { roles, theme } = useContext(StoreContext); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	// /////////////////////////////////////////////////////////

	// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
	const handleItemClick = (item, index) => {
		if (!firstRef) {
			setFirstRef({ item, index });
			console.log(`–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ${item.role || item.slot}`);
		} else {
			const { item: firstItem, index: firstIndex } = firstRef;
			const newData = data.map((el, idx) => {
				if (idx === index) {
					return { ...el, role: firstItem.role, slot: firstItem.slot };
				} else if (idx === firstIndex) {
					return { ...el, role: item.role, slot: item.slot };
				} else {
					return el;
				}
			});

			handleClick(newData);
			console.log(`–í—ã–±—Ä–∞–Ω –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç ${item.role || item.slot}`);
			console.log(`${firstItem.role || firstItem.slot} –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ ${item.role || item.slot}`);

			setFirstRef(null);
		}
	}; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–º–µ–Ω—É –º–µ–∂–¥—É –¥–≤—É–º—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
	const handleRandomClick = () => {
		setFirstRef(null);
		const newData = [...data];

		for (let i = newData.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			const tempItem = newData[i][type];
			newData[i] = { ...newData[i], [type]: newData[j][type] };
			newData[j] = { ...newData[j], [type]: tempItem };
		}

		handleClick(newData);
		if (data.length !== 0) {
			console.log(`${text} –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã`);
		}

	}; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ '–†–∞–Ω–¥–æ–º'. –†–∞–Ω–¥–æ–º–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö

	const copyToClipboard = () => {
		const all = []; // –í—Å–µ —Ä–æ–ª–∏/—Å–ª–æ—Ç—ã
		const blackRoles = []; // –ß–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–∫–∏
		const redRoles = []; // –ö—Ä–∞—Å–Ω—ã–µ –∞–∫—Ç–∏–≤–∫–∏
		data.forEach(item => {
			all.push(`${item.id < 10 ? '0' + item.id : item.id} ${item[type] < 10 ? '0' + item[type] : item[type]}`); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π/—Å–ª–æ—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤ all
			if (type === 'role') {
				if (item.role.includes(roles.mafia.name)) {
					blackRoles.push(`${item.id < 10 ? '0' + item.id : item.id} ${item.role}`);
				} // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ú–∞—Ñ–∏–∏ –≤ –º–∞—Å—Å–∏–≤ blackRoles
			}
		});
		if (type === 'role') {
			const donRole = data.find(item => item.role.includes(roles.don.name));
			if (donRole) {
				blackRoles.push(`${donRole.id < 10 ? '0' + donRole.id : donRole.id} ${donRole.role}`);
			} // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î–æ–Ω–∞ –≤ –º–∞—Å—Å–∏–≤ blackRoles

			const werewolfRole = data.find(item => item.role.includes(roles.werewolf.name));
			if (werewolfRole) {
				blackRoles.push(`${werewolfRole.id < 10 ? '0' + werewolfRole.id : werewolfRole.id} ${werewolfRole.role}`);
			} // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–±–æ—Ä–æ—Ç–Ω—è –≤ –º–∞—Å—Å–∏–≤ blackRoles

			const maniacRole = data.find(item => item.role.includes(roles.maniac.name));
			if (maniacRole) {
				blackRoles.push(`${maniacRole.id < 10 ? '0' + maniacRole.id : maniacRole.id} ${maniacRole.role}`);
			} // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ú–∞–Ω—å—è–∫–∞ –≤ –º–∞—Å—Å–∏–≤ blackRoles

			data.forEach(item => {
				if (
					item.role.includes(roles.mistress.name) ||
					item.role.includes(roles.sergeant.name) ||
					item.role.includes(roles.commissar.name) ||
					item.role.includes(roles.doctor.name)
				) {
					redRoles.push(`${item.id < 10 ? '0' + item.id : item.id} ${item.role}`);
				}
			}); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–∫ –≤ –º–∞—Å—Å–∏–≤ redRoles
		}

		// –§–æ—Ä–º–∞—Ç –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
		const formattedData = `${type === 'role' ? '–í—Å–µ —Ä–æ–ª–∏:' : '–°–ª–æ—Ç—ã:'}\n${all.join('\n')}${type === 'role' ? '\n\n–ß–µ—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–∫–∏ ‚ö´Ô∏è:\n' + blackRoles.join('\n') + '\n\n–ö—Ä–∞—Å–Ω—ã–µ –∞–∫—Ç–∏–≤–∫–∏ üî¥:\n' + redRoles.join('\n') : ''}`;

		navigator.clipboard.writeText(formattedData); // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
		console.log('–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
	}; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'. –∫–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.


	useEffect(() => {
		setFirstRef(null)
	}, [randomSwitch]) // –°–±—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö (—á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∑–∞–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞)
	///////////////////////////////////////

	// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	return (
		<>
			<div className={style.players}>
				{data.map((item, index) => (
					<div key={index} className={style.player}>
						<span className={`${theme} noBtn`}>{item.id < 10 ? '0' + item.id : item.id}</span>
						<span className={`${style.playerBtn} ${firstRef && firstRef.index === index ? 'activeBtn' : ''} ${theme} btn`} onClick={() => handleItemClick(item, index)}>
							{`${item[type] < 10 ? '0' + item[type] : item[type]}`}
						</span>
					</div>
				))}
			</div>
			<div className={style.btns}>
				<button onClick={() => copyToClipboard('role')}>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
				<button onClick={handleRandomClick}>–†–∞–Ω–¥–æ–º</button>
			</div>
		</>
	);
	// /////////////////////////////////////
};

export default Random;
